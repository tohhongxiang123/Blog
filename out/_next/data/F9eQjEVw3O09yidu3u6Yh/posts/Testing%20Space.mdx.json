{"pageProps":{"source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Hello world again\"), mdx(\"p\", null, \"This is an example post, with a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nextjs.org\"\n  }), \"link\"), \" and a React component:\"), mdx(TestComponent, {\n    name: \"next-mdx-remote\",\n    mdxType: \"TestComponent\"\n  }), mdx(\"p\", null, \"The title and description are pulled from the MDX file and processed using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gray-matter\"), \". Additionally, links are rendered using a custom component passed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"next-mdx-remote\"), \".\"), mdx(\"p\", null, \"Go back \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/\"\n  }), \"home\"), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<h1>Hello world again</h1><p>This is an example post, with a <a href=\"https://nextjs.org\">link</a> and a React component:</p><div class=\"jsx-1758755879\">Hello, <!-- -->next-mdx-remote<!-- -->!</div><p>The title and description are pulled from the MDX file and processed using <code>gray-matter</code>. Additionally, links are rendered using a custom component passed to <code>next-mdx-remote</code>.</p><p>Go back <a href=\"/\">home</a>.</p>","scope":{"description":"This frontmatter description will appear below the title","title":" Hello world again"}},"frontMatter":{"description":"This frontmatter description will appear below the title","title":" Hello world again"}},"__N_SSG":true}